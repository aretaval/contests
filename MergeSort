#include <iostream>
#include <vector>

template <typename Iterator>
Iterator myCopy(Iterator first, Iterator last, Iterator out) {
    while (first != last) {
        *out = *first;
        ++out;
        ++first;
    }
    return out;
}

template <typename Iterator>
Iterator myMerge(Iterator first1, Iterator last1, Iterator first2, Iterator last2, Iterator out) {
    for (; first1 != last1; ++out) {
        if (first2 == last2) {
            return myCopy(first1, last1, out);
        }

        if (*first1 < *first2) {
            *out = *first1;
            ++first1;
        } else {
            *out = *first2;
            ++first2;
        }
    }
    myCopy(first2, last2, out);
    return out;
}

template <typename Iterator>
void mergeSort(Iterator first, Iterator last) {
    if (last - first > 1) {
        Iterator middle = first + (last - first) / 2;
        mergeSort(first, middle);
        mergeSort(middle, last);

        std::vector<int> buffer(last - first);
        myMerge(first, middle, middle, last, buffer.begin());
        myCopy(buffer.begin(), buffer.end(), first);
        buffer.clear();
        buffer.shrink_to_fit();
    }
}

int main() {
    size_t size;
    std::cin >> size;

    std::vector<int> vec(size);
    for (size_t i = 0; i != size; ++i) {
        std::cin >> vec[i];
    }

    mergeSort(vec.begin(), vec.end());
    for (auto elem : vec) {
        std::cout << elem << " ";
    }
    std::cout << "\n";
}
